ls()
getwd()
setwd("C:/js-data/personnel/coursDuSoir/BigData/BigDataUniverstiy/001_R_introduction/Rworkspace/001
")
setwd("C:/js-data/personnel/coursDuSoir/BigData/BigDataUniverstiy/001_R_introduction/Rworkspace/001")
library()
load("C:/js-data/personnel/coursDuSoir/BigData/BigDataUniverstiy/001_R_introduction/Rworkspace/001/.RData")
q
q()
prices <- c(12.45, 10.50, 13.30)
mean(prices)
prices[2]
types <- c("shirt", "sock", "pants")
amounts <- as.integer(c(3, 6, 7))
values <- prices * amounts
values <- prices %*% amounts
amounts <- append ( amounts, c (4,5,6) )
print(amount)
print(amounts)
store.sales <- matrix (amounts, nrow=2, ncol=3)
print(store.sales)
sales <- store.sales %*% prices
print(sales)
store.sales[2,2]
dimstores <- c("Paris", "Toronto")
dimnames(store.sales) <- list( dimstores, types)
print(store.sales)
dimnames(store.sales) <- list( c("Toronto","Paris"), types)
print(store.sales)
store.sales["paris","pants"]
store.sales["Paris","pants"]
sum(store.sales[,2])
sum(store.sales[,"sock"])
colSums(store.sales)
rowSums(store.sales)
employees <- c("Mary", "Bob","Cindy")
salaries <- c( 34000, 45000, 76000)
hr <- list (employees, salaries)
hr
mean(hr[[2]])
mean(hr[[1]])
names(hr) <- c("employe","salary")
hr
max(hr$salary)
df1 <- data.frame (students = c("Mary", "Jane", "Eva"), test1 = c(80,90,70) )
df1
str(df1)
df1$students <- as.character(df1$students)
summary (df1$test1)
sum(df1$salary)
df1
sum(df1$test1)
df1<- cbind(df1, birth = as.Date(c("1990-08-01", "1995-07-23", "1993-12-13")))
df1<-rbind( df1,c("Leon", 95, "1990-08-09") )
tail(df1,1)
head(df1,1)
df1
q()
formatC(1, width = 6, format = "d", flag = "0")
formatC(1, width = 3, format = "d", flag = "0")
formatC(100, width = 3, format = "d", flag = "0")
paste(
formatC(1, width = 3, format = "d", flag = "0")
,".csv", sep = "")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
setwd(directory)
nc <- col(id)
means <- numeric(nc)
for(i in 1:nc) {
filename <- paste(
formatC(i, width = 3, format = "d", flag = "0")
,".csv", sep = "")
data_cur <- read.csv(filename, header=TRUE)
print(data_cur([pollutant,i]))
}
}
x
1+2
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- matrix(1:6,2,3)
x
solve(x)
x <- matrix(1:4,2,2)
x
solve(x)
x*solve(x)
x %*% solve(x)
y <- solve(x)
x %*% y
y %*% x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:20)
cachemean(1:20)
x <- 1:20
cachemean(x)
makeVector(x)
cachemean(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
m <- matrix(1:6,2,3)
diag(m)
m
m <- matrix(1:9,3,3)
diag(m)
?solve
bigVec <- makeVector(1:1000)
bigVec
biggerVec <- makeVector(1:100000)   # 'biggerVec' of type list with 100,000 numbers
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
makeCacheMatrix <- function(x = matrix()) {# input x will be a vector
m <- NULL    #  m will be our 'Inverse Matrix' and it's reset to NULL every
#  time makeCacheMatrix is called
#  note these next four functions are defined but not run when makeCacheMatrix is called.
#   instead, they will be used by cacheSolve() to get values for x or for
#   m (Inverse Matrix) and for setting the Inverse Matrix.  These are usually called object 'methods'
# this function reset the object created when makeCacheMatrix has been called
set <- function(y) {
x <<- y
m <<- NULL
}
# this function returns the value of the original matrix
get <- function() { x }
# this is called by cacheSolve() during the first cacheSolve()
#  access and it will store the value using superassignment
setInverseMatrix <- function(v_matrix)  { m <<- v_matrix }
# this will return the cached value to cacheSolve() on
#  subsequent accesses
getInverseMatrix <- function() { m }
#  This is accessed each time makeCacheMatrix() is called,
#   that is, each time we make a new object.  This is a list of
#   the internal functions ('methods') so a calling function
#   knows how to access those methods.
list(get = get,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x,...) {
m<-x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverseMatrix(m)
m
}
x <- matrix(1:4,2,2)
curMatrix <- makeCacheMatrix(x)
cacheSolve(curMatrix)
cacheSolve(curMatrix)
x <- matrix(1:9,3,3)
cur2Matrix <- makeCacheMatrix(x)
cacheSolve(curMatrix2)
cacheSolve(cur2Matrix)
solve(x)
x
cacheSolve(cur2Matrix)
makeCacheMatrix <- function(x = matrix()) {# input x will be a vector
m <- NULL    #  m will be our 'Inverse Matrix' and
#  it's reset to NULL every time makeCacheMatrix
#  is called
# note these next four functions are defined but not run
# when makeCacheMatrix is called.
# instead, they will be used by cacheSolve() to get values
# for x or for m (Inverse Matrix) and for setting the
# Inverse Matrix.  These are usually called object 'methods'
# this function reset the object created when
# makeCacheMatrix has been called
set <- function(y) { # takes an input matrix
x <<- y            # saves the input matrix
m <<- NULL         # resets the mean to NULL, basically what
# happens when a new object is generated.
}
# this function returns the value of the original matrix
get <- function() { x }
# this is called by cacheSolve() during the first cacheSolve()
# access and it will store the value using superassignment
setInverseMatrix <- function(v_matrix)  { m <<- v_matrix }
# this will return the cached value to cacheSolve() on
# subsequent accesses
getInverseMatrix <- function() { m }
# This is accessed each time makeCacheMatrix() is called,
# that is, each time we make a new object.  This is a list of
# the internal functions ('methods') so a calling function
# knows how to access those methods.
list(get = get,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x,...) { # the input x is an object created
# by makeCacheMatrix
m<-x$getInverseMatrix()   # accesses the object 'x' and gets
#the value of the inverse matrix
if(!is.null(m)) {         # if inverse matrix was already
# cached (not NULL) ...
message("getting cached data") # send this message to the console
return(m)                      # and return the inverse matrix
# "return" ends the function.
}
# we reach this code only if x$getInverseMatrix() returned NULL
data <- x$get()             # get the 'original' the matrix
m <- solve(data, ...)       # if m was NULL then we have
# to calculate the inverse matrix
x$setInverseMatrix(m)       # store the calculated inverse matrix
# value in x (see setInverseMatrix()
# in makeInverseMatrix
m                           # return the inverse matrix to the
# code that called this function
}
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?qpois
?ppois
?rpois
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
summary(y)
plot(x, y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- 0
x2 <- 2
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 0
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
install.packages("KernSmooth")
?KernSmooth
library(KernSmooth)
?par
?dev
meanTinyActivity <- mean(dfActAggMean$meanSteps, na.rm = TRUE)
dfTinyActivity <- dfActivity
dfActivity <- read.csv("./ProjectData/activity.csv", sep=",", header=TRUE, fill = TRUE, quote = "\"",na.strings = "NA")
setwd("C:/js-data/personnel/coursDuSoir/Coursera/DataScientist_05_ReproductibleResearch/Project/Project01/RepData_PeerAssessment1")
dfActivity <- read.csv("./ProjectData/activity.csv", sep=",", header=TRUE, fill = TRUE, quote = "\"",na.strings = "NA")
dfActivity$newdate <- strptime(as.character(dfActivity$date), "%Y-%m-%d")
dfActivity$txtdate <- format(dfActivity$newdate, "%d/%m/%Y")
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity$steps),
by=list(ActivityDate=dfActivity$date),
FUN=sum,
na.rm=TRUE)
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = mean(dfActAgg$sumSteps), col = "red", lwd = 2)
abline(v = median(dfActAgg$sumSteps), col = "blue", lwd = 2)
legend("topright", c("mean", "median"), lty = c(1, 1), col = c("red", "blue"))
meanActivity <- mean(dfActAgg$sumSteps, na.rm = TRUE)
medianActivity <- median(dfActAgg$sumSteps, na.rm = TRUE)
dfActAggInt <- aggregate(data.frame(meanSteps = dfActivity$steps),
by=list(ActivityInterval=dfActivity$interval),
FUN=mean,
na.rm=TRUE)
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark blue",
type="l",
main="Average number of steps taken across all days",
ylab="Mean of Step",
xlab="Interval")
abline(v = dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"], col = "red", lwd = 2)
legend("topright", c("max"), lty = c(1), col = c("red"))
dfActAggInt[which.max(dfActAggInt$meanSteps),]
dfTinyActivity <- dfActivity
runApplyMean <- function(xact) {
if(is.na(xact)==TRUE) {
t<- meanActivity
}
else {
t<-xact
}
t
}
dfTinyActAgg <- aggregate(data.frame(sumSteps = dfTinyActivity$steps),
by=list(ActivityDate=dfTinyActivity$date),
FUN=sum)
for(i in seq_along(dfTinyActAgg)) {
dfTinyActAgg$sumSteps[i] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
View(dfTinyActAgg)
dfTinyActivity <- dfActivity
dfTinyActAgg <- aggregate(data.frame(sumSteps = dfTinyActivity$steps),
by=list(ActivityDate=dfTinyActivity$date),
FUN=sum)
View(dfTinyActAgg)
for(i in seq_along(dfTinyActAgg)) {
print(i)
#dfTinyActAgg$sumSteps[i] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
?seq_along
seq_along(dfTinyActAgg)
seq_len(dfTinyActAgg)
View(dfTinyActAgg)
seq_len(dfTinyActAgg[,"sumSteps"])
lenght(dfTinyActAgg)
?len
nrow(dfTinyActAgg)
View(dfTinyActAgg)
seq_len(dfTinyActAgg)
seq_len(data.frame(dfTinyActAgg)
)
for(i in 1:nrows(dfTinyActAgg)) {
print(i)
#dfTinyActAgg$sumSteps[i] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
for(i in 1:nrow(dfTinyActAgg)) {
print(i)
#dfTinyActAgg$sumSteps[i] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
for(i in 1:nrow(dfTinyActAgg)) {
dfTinyActAgg$sumSteps[i,"sumSteps] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
for(i in 1:nrow(dfTinyActAgg)) {
dfTinyActAgg$sumSteps[i,"sumSteps"] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
for(i in 1:nrow(dfTinyActAgg)) {
dfTinyActAgg$sumSteps[i] <- runApplyMean(dfTinyActAgg[i,"sumSteps"])
}
View(dfTinyActAgg)
hist(dfTinyActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day with NA removed',
col='lightblue')
abline(v = mean(dfTinyActAgg$sumSteps), col = "red", lwd = 2)
abline(v = median(dfTinyActAgg$sumSteps), col = "blue", lwd = 2)
legend("topright", c("mean", "median"), lty = c(1, 1), col = c("red", "blue"))
meanTinyActivity <- mean(dfTinyActAgg$sumSteps, na.rm = TRUE)
medianTinyActivity <- median(dfTinyActAgg$sumSteps, na.rm = TRUE)
?round
meanTinyActivity <-   mean(round(dfTinyActAgg$sumSteps,0), na.rm = TRUE),0)
meanActivity <- round(mean(dfActAgg$sumSteps, na.rm = TRUE),0)
medianActivity <- round(median(dfActAgg$sumSteps, na.rm = TRUE),0)
meanTinyActivity <-   round(mean(dfTinyActAgg$sumSteps, na.rm = TRUE),0)
class(meanTinyActivity)
?object
?obj
?format
nrow(dfActivity[is.na(dfActivity$steps),])
nrow(dfActivity[is.na(dfActivity$date),])
nrow(dfActivity[is.na(dfActivity$interval),])
nrow(dfActivity[is.na(dfActivity$steps),])
dfActAggCountNA <- count(dfActNA, c('date'))
library(plyr)
dfActAggCountNA <- count(dfActNA, c('date'))
dfActNA<-dfActivity[is.na(dfActivity$steps),]
dfActAggCountNA <- count(dfActNA, c('date'))
dfActAggCountAll <- count(dfActivity, c('date'))
dfActAggCount  <- merge(x = dfActAggCountNA, y = dfActAggCountAll, by = "date", all.y = TRUE)
View(dfActAggCount)
nrow(dfActivity[is.na(dfActivity$steps),])
nrow(dfActivity)
dfActAggCountNA <- count(nrow(dfActivity[is.na(dfActivity$steps),])
, c('date'))
View(dfActNA)
dfActAggCountNA <- count(dfActNA, c('date'))
View(dfActAggCountNA)
dfActAggCountAll <- count(dfActivity, c('date'))
dfActAggCount  <- merge(x = dfActAggCountNA, y = dfActAggCountAll, by = "date", all.y = TRUE)
dfActAggCount <- rename(dfActAggCount, c("freq.x"="nbNA", "freq.y"="nbAll"))
View(dfActAggCount)
dfActAggCount <- rename(dfActAggCount, c("freq.x"="nbMissingValues", "freq.y"="nbAll"))
dfActAggCount  <- merge(x = dfActAggCountNA, y = dfActAggCountAll, by = "date", all.y = TRUE)
dfActAggCount <- rename(dfActAggCount, c("freq.x"="nbMissingValues", "freq.y"="nbAll"))
dfActAggCount  <- merge(x = dfActAggCountNA, y = dfActAggCountAll, by = "date", all.x = TRUE)
dfActAggCount <- rename(dfActAggCount, c("freq.x"="nbMissingValues", "freq.y"="nbAll"))
```{r showtable3, Results="asis" , echo=FALSE}
