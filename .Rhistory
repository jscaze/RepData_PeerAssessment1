cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
m <- matrix(1:6,2,3)
diag(m)
m
m <- matrix(1:9,3,3)
diag(m)
?solve
bigVec <- makeVector(1:1000)
bigVec
biggerVec <- makeVector(1:100000)   # 'biggerVec' of type list with 100,000 numbers
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
makeCacheMatrix <- function(x = matrix()) {# input x will be a vector
m <- NULL    #  m will be our 'Inverse Matrix' and it's reset to NULL every
#  time makeCacheMatrix is called
#  note these next four functions are defined but not run when makeCacheMatrix is called.
#   instead, they will be used by cacheSolve() to get values for x or for
#   m (Inverse Matrix) and for setting the Inverse Matrix.  These are usually called object 'methods'
# this function reset the object created when makeCacheMatrix has been called
set <- function(y) {
x <<- y
m <<- NULL
}
# this function returns the value of the original matrix
get <- function() { x }
# this is called by cacheSolve() during the first cacheSolve()
#  access and it will store the value using superassignment
setInverseMatrix <- function(v_matrix)  { m <<- v_matrix }
# this will return the cached value to cacheSolve() on
#  subsequent accesses
getInverseMatrix <- function() { m }
#  This is accessed each time makeCacheMatrix() is called,
#   that is, each time we make a new object.  This is a list of
#   the internal functions ('methods') so a calling function
#   knows how to access those methods.
list(get = get,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x,...) {
m<-x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverseMatrix(m)
m
}
x <- matrix(1:4,2,2)
curMatrix <- makeCacheMatrix(x)
cacheSolve(curMatrix)
cacheSolve(curMatrix)
x <- matrix(1:9,3,3)
cur2Matrix <- makeCacheMatrix(x)
cacheSolve(curMatrix2)
cacheSolve(cur2Matrix)
solve(x)
x
cacheSolve(cur2Matrix)
makeCacheMatrix <- function(x = matrix()) {# input x will be a vector
m <- NULL    #  m will be our 'Inverse Matrix' and
#  it's reset to NULL every time makeCacheMatrix
#  is called
# note these next four functions are defined but not run
# when makeCacheMatrix is called.
# instead, they will be used by cacheSolve() to get values
# for x or for m (Inverse Matrix) and for setting the
# Inverse Matrix.  These are usually called object 'methods'
# this function reset the object created when
# makeCacheMatrix has been called
set <- function(y) { # takes an input matrix
x <<- y            # saves the input matrix
m <<- NULL         # resets the mean to NULL, basically what
# happens when a new object is generated.
}
# this function returns the value of the original matrix
get <- function() { x }
# this is called by cacheSolve() during the first cacheSolve()
# access and it will store the value using superassignment
setInverseMatrix <- function(v_matrix)  { m <<- v_matrix }
# this will return the cached value to cacheSolve() on
# subsequent accesses
getInverseMatrix <- function() { m }
# This is accessed each time makeCacheMatrix() is called,
# that is, each time we make a new object.  This is a list of
# the internal functions ('methods') so a calling function
# knows how to access those methods.
list(get = get,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x,...) { # the input x is an object created
# by makeCacheMatrix
m<-x$getInverseMatrix()   # accesses the object 'x' and gets
#the value of the inverse matrix
if(!is.null(m)) {         # if inverse matrix was already
# cached (not NULL) ...
message("getting cached data") # send this message to the console
return(m)                      # and return the inverse matrix
# "return" ends the function.
}
# we reach this code only if x$getInverseMatrix() returned NULL
data <- x$get()             # get the 'original' the matrix
m <- solve(data, ...)       # if m was NULL then we have
# to calculate the inverse matrix
x$setInverseMatrix(m)       # store the calculated inverse matrix
# value in x (see setInverseMatrix()
# in makeInverseMatrix
m                           # return the inverse matrix to the
# code that called this function
}
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?qpois
?ppois
?rpois
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
summary(y)
plot(x, y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- 0
x2 <- 2
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 0
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
install.packages("KernSmooth")
?KernSmooth
library(KernSmooth)
?par
?dev
Sys.setlocale(category = "LC_ALL", locale = "English")
set.seed(1024)
sessionInfo()
library(knitr)
library(xtable)
dfActivity <- read.csv("./ProjectData/activity.csv", sep=",", header=TRUE, fill = TRUE, quote = "\"",na.strings = "NA")
dfActivity <- read.csv("./ProjectData/activity.csv", sep=",", header=TRUE, fill = TRUE, quote = "\"",na.strings = "NA")
setwd(C:/js-data/personnel/coursDuSoir/Coursera/DataScientist_05_ReproductibleResearch/Project/Project01/RepData_PeerAssessment1)
setwd("C:/js-data/personnel/coursDuSoir/Coursera/DataScientist_05_ReproductibleResearch/Project/Project01/RepData_PeerAssessment1")
dfActivity <- read.csv("./ProjectData/activity.csv", sep=",", header=TRUE, fill = TRUE, quote = "\"",na.strings = "NA")
dfActivity$newdate <- strptime(as.character(dfActivity$date), "%Y-%m-%d")
dfActivity$txtdate <- format(dfActivity$newdate, "%d/%m/%Y")
x <- complete.cases(dfActivity$steps)
dfActivity_cc <- dfActivity[x,]
dfActAgg <- aggregate(dfActivity_cc$steps,by=list(dfActivity_cc$newdate),      FUN = sum, na.action = na.omit)
dfActAgg <- aggregate(dfActivity_cc$steps,by=list(ActivityDate=dfActivity_cc$newdate),      FUN = sum, na.action = na.omit)
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity_cc$steps), by = list(typ2 = dfActivity_cc$newdate), sum)
y <- complete.cases(dfActivity$newdate)
dfActivity_cc <- dfActivity[x&&y,]
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity_cc$steps), by = list(typ2 = dfActivity_cc$newdate), sum)
View(dfActivity_cc)
x
y
dfActivity_cc <- dfActivity[y,]
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity_cc$steps), by = list(typ2 = dfActivity_cc$newdate), sum)
View(dfActivity_cc)
View(dfActivity)
y <- complete.cases(dfActivity$newdate)
dfActivity_cc <- dfActivity[y,]
dfActivity$newdate
dfActivity_cc <- dfActivity[y]
View(dfActivity_cc)
dfActivity_cc <- dfActivity[y, ]
dfActivity_cc <- dfActivity[y]
dfActivity_cc <- dfActivity[x,]
y <- complete.cases(dfActivity$date)
dfActivity_cc <- dfActivity[y,]
dfActivity_cc <- dfActivity[x,]
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity_cc$steps), by = list(typ2 = dfActivity_cc$newdate), sum)
dfActAgg <- aggregate(dfActivity_cc$steps, by = list(newdate), sum)
dfActAgg <- aggregate(dfActivity_cc, by = list("newdate""), sum)
dfActAgg <- aggregate(dfActivity_cc, by = list("newdate"), sum)
dfActAgg <- aggregate(dfActivity_cc, by = list("newdate"), sum)
#aggregate(dfActivity_cc$steps,by=list(ActivityDate=dfActivity_cc$newdate),FUN = sum, na.action = na.omit)
dfActAgg <- aggregate(dfActivity_cc, by = list("newdate"), FUN=sum, na.rm=TRUE)
dfActAgg <- aggregate(dfActivity_cc, by = list(dfActivity_cc$newdate), FUN=sum, na.rm=TRUE)
dfActAgg <- aggregate(dfActivity_cc, by = list(dfActivity_cc$date), FUN=sum, na.rm=TRUE)
dfActAgg <- aggregate(dfActivity_cc$steps,by=list(ActivityDate=dfActivity_cc$date),FUN = sum, na.action = na.omit)
dfActAgg <- aggregate(dfActivity_cc$steps,by=list(ActivityDate=dfActivity_cc$date),FUN=sum, na.rm=TRUE)
View(dfActAgg)
dfActAgg <- aggregate(dfActivity_cc$steps,by=list(ActivityDate=dfActivity_cc$date),FUN=sum, na.rm=TRUE)
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity_cc$steps),by=list(ActivityDate=dfActivity_cc$date),FUN=sum, na.rm=TRUE)
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity$steps),by=list(ActivityDate=dfActivity$date),FUN=sum, na.rm=TRUE)
dfActAgg <- aggregate(data.frame(sumSteps = dfActivity$steps),by=list(ActivityDate=dfActivity$date),FUN=sum, na.rm=TRUE)
View(dfActAgg)
?hsit
?hist
hist(dfActAgg,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
hist(dfActivity$steps,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
hist(dfActivity$Date,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
hist(dfActivity$sumSteps,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
hist(dfActivity$sumSteps,
breaks = interv,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
hist(dfActivity$sumSteps,
breaks = interv,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
hist(dfActivity$sumSteps,
breaks = interv,
xlab = 'Global Active Power (kilowatts)',
ylab = 'Frequency',
main = 'Global active power',
col='red')
den <- density(vect)
lines(den, col = "red")
hist(dfActivity$sumSteps,
breaks = interv,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='red')
hist(dfActivity$sumSteps,
#breaks = interv,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='red')
hist(dfActAgg$sumSteps,
#breaks = interv,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='red')
den <- density(dfActivity$sumSteps)
lines(den, col = "red")
hist(dfActAgg$sumSteps,
breaks = interv,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='red')
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='red')
den <- density(dfActivity$sumSteps)
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='red')
den <- density(dfActAgg$sumSteps)
lines(den, col = "red")
den <- density(dfActAgg$sumSteps)
lines(den, col = "blue")
lines(den, col = "blue")
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
den <- density(dfActAgg$sumSteps)
lines(den, col = "blue")
hist(dfActAgg$sumSteps,
breaks = 1000,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
hist(dfActAgg$sumSteps,
breaks = 10000,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
hist(dfActAgg$sumSteps,
#     breaks = 10000,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
?frequence
?frequency
?mean
hist(dfActAgg$sumSteps,
#     breaks = 10000,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
den <- mean(dfActAgg$sumSteps)
lines(den, col = "blue")
hist(dfActAgg$sumSteps,
#     breaks = 10000,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = dfActAgg$sumSteps, col = "red", lwd = 2)
hist(dfActAgg$sumSteps,
#     breaks = 10000,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = mean(dfActAgg$sumSteps), col = "red", lwd = 2)
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = mean(dfActAgg$sumSteps), col = "red", lwd = 2)
?par
?abline
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = mean(dfActAgg$sumSteps), col = "red", lwd = 2)
abline(v = median(dfActAgg$sumSteps), col = "blue", lwd = 2)
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = mean(dfActAgg$sumSteps), col = "red", lwd = 2)
abline(v = median(dfActAgg$sumSteps), col = "blue", lwd = 2)
legend("topright", c("mean", "median"), lty = c(1, 1), col = c("red", "blue"))
View(dfActivity)
?barplot
View(dfActivity)
dfActAggInt <- aggregate(data.frame(sumSteps = dfActivity$steps),
by=list(ActivityDate=dfActivity$interval),
FUN=mean,
na.rm=TRUE)
View(dfActAggInt)
dfActAggInt <- aggregate(data.frame(meanSteps = dfActivity$steps),
by=list(ActivityDate=dfActivity$interval),
FUN=mean,
na.rm=TRUE)
dfActAggInt <- aggregate(data.frame(meanSteps = dfActivity$steps),
by=list(ActivityInterval=dfActivity$interval),
FUN=mean,
na.rm=TRUE)
plot(
y=as.numeric(dfActAggInt$meanSteps),
x=dfActAggInt$interval,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="interval",
xaxt="n") #disable x auto label
plot(
y=dfActAggInt$meanSteps,
x=dfActAggInt$interval,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="interval",
xaxt="n") #disable x auto label
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="interval",
xaxt="n") #disable x auto label
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="interval")
?max
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="Interval")
abline(v = max(dfActAgg$sumSteps), col = "red", lwd = 2)
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="Interval")
abline(v = max(dfActAgg$meanSteps), col = "red", lwd = 2)
abline(v = max(dfActAggInt$meanSteps), col = "red", lwd = 2)
hist(dfActAgg$sumSteps,
xlab = 'number of steps per day',
ylab = 'Frequency',
main = 'Frequency of number of Steps per day',
col='lightblue')
abline(v = mean(dfActAgg$sumSteps), col = "red", lwd = 2)
abline(v = median(dfActAgg$sumSteps), col = "blue", lwd = 2)
legend("topright", c("mean", "median"), lty = c(1, 1), col = c("red", "blue"))
mean(dfActAgg$sumSteps)
median(dfActAgg$sumSteps)
max(dfActAggInt$meanSteps)
?max
dfActivity[steps=206.1698,]
View(dfActivity)#[steps=206.1698,]
dfActivity[steps=="206.1698",]
dfActivity[$steps=="206.1698",]
dfActivity[dfActivity$steps=="206.1698",]
dfActivity[dfActivity[dfActivity$steps=="206.1698",],]
dfActivity[dfActivity$steps=="206.1698","interval"]
dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"]
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark red",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="Interval")
abline(v = dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"], col = "red", lwd = 2)
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="light blue",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="Interval")
abline(v = dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"], col = "red", lwd = 2)
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark blue",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="Interval")
abline(v = dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"], col = "red", lwd = 2)
plot(
x=dfActAggInt$ActivityInterval,
y=dfActAggInt$meanSteps,
col="dark blue",
type="l",
main="Average number of steps taken across al day",
ylab="Mean of Step",
xlab="Interval")
abline(v = dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"], col = "red", lwd = 2)
legend("topright", c("max"), lty = c(1), col = c("red"))
dfActAggInt[dfActAggInt$meanSteps==max(dfActAggInt$meanSteps),"ActivityInterval"]
dfActivity[interval=835,]
dfActivity[dfActivity$interval="835",]
dfActivity[dfActivity$interval=="835",]
View(dfActivity[dfActivity$interval=="835",])
